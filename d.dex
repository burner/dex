"[:alpha:_][:word:]*" {: return Token(this.getLoc(), termidentifier, this.lexText.getString()); :}
"!" {: return Token(this.getLoc(), termbang); :}
"!<" {: return Token(this.getLoc(), termbangless); :}
"!<=" {: return Token(this.getLoc(), termbanglessequal); :}
"!<>" {: return Token(this.getLoc(), termbangsquare); :}
"!<>=" {: return Token(this.getLoc(), termbangsquareassign); :}
"!=" {: return Token(this.getLoc(), termnotequal); :}
"!>" {: return Token(this.getLoc(), termbanggreater); :}
"!>=" {: return Token(this.getLoc(), termbanggreaterassign); :}
"!is" {: return Token(this.getLoc(), termbangis); :}
"!in" {: return Token(this.getLoc(), termbangin); :}
"$" {: return Token(this.getLoc(), termdollarsym); :}
"%" {: return Token(this.getLoc(), termmodulo); :}
"%=" {: return Token(this.getLoc(), termmoduloassign); :}
"&" {: return Token(this.getLoc(), termlogicaland); :}
"&&" {: return Token(this.getLoc(), termand); :}
"&=" {: return Token(this.getLoc(), termandassign); :}
"(" {: return Token(this.getLoc(), termlparen); :}
")" {: return Token(this.getLoc(), termrparen); :}
"*" {: return Token(this.getLoc(), termstar); :}
"*=" {: return Token(this.getLoc(), termstarassign); :}
"+=" {: return Token(this.getLoc(), termplusassign); :}
"," {: return Token(this.getLoc(), termcomma); :}
"-" {: return Token(this.getLoc(), termminus); :}
"--" {: return Token(this.getLoc(), termdecrement); :}
"-=" {: return Token(this.getLoc(), termminusassign); :}
"." {: return Token(this.getLoc(), termdot); :}
".." {: return Token(this.getLoc(), termdotdot); :}
"..." {: return Token(this.getLoc(), termdotdotdot); :}
"/" {: return Token(this.getLoc(), termdiv); :}
"/=" {: return Token(this.getLoc(), termdivassign); :}
":" {: return Token(this.getLoc(), termcolon); :}
";" {: return Token(this.getLoc(), termsemicolon); :}
"<" {: return Token(this.getLoc(), termless); :}
"<<" {: return Token(this.getLoc(), termleftshift); :}
"<<=" {: return Token(this.getLoc(), termleftshiftassign); :}
"<=" {: return Token(this.getLoc(), termlessequal); :}
"=>" {: return Token(this.getLoc(), termarrow); :}
"=" {: return Token(this.getLoc(), termassign); :}
"==" {: return Token(this.getLoc(), termequal); :}
">" {: return Token(this.getLoc(), termgreater); :}
">=" {: return Token(this.getLoc(), termgreaterequal); :}
">>" {: return Token(this.getLoc(), termrightshift); :}
">>=" {: return Token(this.getLoc(), termrightshiftassign); :}
">>>" {: return Token(this.getLoc(), termunsignedrightshift); :}
">>>=" {: return Token(this.getLoc(), termunsignedrightshiftassign); :}
"?" {: return Token(this.getLoc(), termquestionmark); :}
"unsafe" {: return Token(this.getLoc(), termsafe); :}
"system" {: return Token(this.getLoc(), termsystem); :}
"\+" {: return Token(this.getLoc(), termplus); :}
"\+\+" {:  return Token(this.getLoc(), termincrement); :}
"\\[" {: return Token(this.getLoc(), termlbrack); :}
"\\]" {: return Token(this.getLoc(), termrbrack); :}
"^" {: return Token(this.getLoc(), termxor); :}
"^^" {: return Token(this.getLoc(), termxorxor); :}
"^=" {: return Token(this.getLoc(), termxorassign); :}
"^^=" {: return Token(this.getLoc(), termxorxorassign); :}
"abstract" {: return Token(this.getLoc(), termabstract); :}
"alias" {: return Token(this.getLoc(), termalias); :}
"align" {: return Token(this.getLoc(), termalign); :}
"assert" {: return Token(this.getLoc(), termassert); :}
"auto" {: return Token(this.getLoc(), termauto); :}
"bool" {: return Token(this.getLoc(), termbool); :}
"break" {: return Token(this.getLoc(), termbreak); :}
"byte" {: return Token(this.getLoc(), termbyte); :}
"case" {: return Token(this.getLoc(), termcase); :}
"cast" {: return Token(this.getLoc(), termcast); :}
"catch" {: return Token(this.getLoc(), termcatch); :}
"shared" {: return Token(this.getLoc(), termshared); :}
"cdouble" {: return Token(this.getLoc(), termcdouble); :}
"cfloat" {: return Token(this.getLoc(), termcfloat); :}
"char" {: return Token(this.getLoc(), termchar); :}
"class" {: return Token(this.getLoc(), termclass); :}
"const" {: return Token(this.getLoc(), termconst); :}
"continue" {: return Token(this.getLoc(), termcontinue); :}
"creal" {: return Token(this.getLoc(), termcreal); :}
"dchar" {: return Token(this.getLoc(), termdchar); :}
"default" {: return Token(this.getLoc(), termdefault); :}
"delete" {: return Token(this.getLoc(), termdelete); :}
"delegate" {: return Token(this.getLoc(), termdelegate); :}
"deprecated" {: return Token(this.getLoc(), termdeprecated); :}
"do" {: return Token(this.getLoc(), termdo); :}
"double" {: return Token(this.getLoc(), termdouble); :}
"enum" {: return Token(this.getLoc(), termenum); :}
"else" {: return Token(this.getLoc(), termelse); :}
"export" {: return Token(this.getLoc(), termexport); :}
"extern" {: return Token(this.getLoc(), termextern); :}
"false" {: return Token(this.getLoc(), termfalse); :}
"final" {: return Token(this.getLoc(), termfinal); :}
"finally" {: return Token(this.getLoc(), termfinally); :}
"float" {: return Token(this.getLoc(), termfloat); :}
"for" {: return Token(this.getLoc(), termfor); :}
"function" {: return Token(this.getLoc(), termfunction); :}
"goto" {: return Token(this.getLoc(), termgoto); :}
"idouble" {: return Token(this.getLoc(), termidouble); :}
"if" {: return Token(this.getLoc(), termif); :}
"ifloat" {: return Token(this.getLoc(), termifloat); :}
"import" {: return Token(this.getLoc(), termimport); :}
"immutable" {: return Token(this.getLoc(), termimmutable); :}
"in" {: return Token(this.getLoc(), termin); :}
"int" {: return Token(this.getLoc(), termint); :}
"size_t" {: return Token(this.getLoc(), termsize_t); :}
"interface" {: return Token(this.getLoc(), terminterface); :}
"invariant" {: return Token(this.getLoc(), terminvariant); :}
"ireal" {: return Token(this.getLoc(), termireal); :}
"is" {: return Token(this.getLoc(), termis); :}
"long" {: return Token(this.getLoc(), termlong); :}
"part" {: return Token(this.getLoc(), termmodule); :}
"new" {: return Token(this.getLoc(), termnew); :}
"nothrow" {: return Token(this.getLoc(), termnothrow); :}
"null" {: return Token(this.getLoc(), termnull); :}
"override" {: return Token(this.getLoc(), termoverride); :}
"private" {: return Token(this.getLoc(), termprivate); :}
"protected" {: return Token(this.getLoc(), termprotected); :}
"public" {: return Token(this.getLoc(), termpublic); :}
"real" {: return Token(this.getLoc(), termreal); :}
"ref" {: return Token(this.getLoc(), termref); :}
"return" {: return Token(this.getLoc(), termreturn); :}
"package" {: return Token(this.getLoc(), termpackage); :}
"pure" {: return Token(this.getLoc(), termpure); :}
"scope" {: return Token(this.getLoc(), termscope); :}
"short" {: return Token(this.getLoc(), termshort); :}
"static" {: return Token(this.getLoc(), termstatic); :}
"struct" {: return Token(this.getLoc(), termstruct); :}
"super" {: return Token(this.getLoc(), termsuper); :}
"switch" {: return Token(this.getLoc(), termswitch); :}
"synchronize" {: return Token(this.getLoc(), termsynchronized); :}
"this" {: return Token(this.getLoc(), termthis); :}
"throw" {: return Token(this.getLoc(), termthrow); :}
"true" {: return Token(this.getLoc(), termtrue); :}
"try" {: return Token(this.getLoc(), termtry); :}
"ubyte" {: return Token(this.getLoc(), termubyte); :}
"uint" {: return Token(this.getLoc(), termuint); :}
"ulong" {: return Token(this.getLoc(), termulong); :}
"union" {: return Token(this.getLoc(), termunion); :}
"unittest" {: return Token(this.getLoc(), termunittest); :}
"ushort" {: return Token(this.getLoc(), termushort); :}
"void" {: return Token(this.getLoc(), termvoid); :}
"wchar" {: return Token(this.getLoc(), termwchar); :}
"while" {: return Token(this.getLoc(), termwhile); :}
"__FILE__" {: return Token(this.getLoc(), termfile); :}
"__LINE__" {: return Token(this.getLoc(), termline); :}
"{" {: return Token(this.getLoc(), termlcurly); :}
"|" {: return Token(this.getLoc(), termlogicalor); :}
"|=" {: return Token(this.getLoc(), termorassign); :}
"||" {: return Token(this.getLoc(), termor); :}
"}" {: return Token(this.getLoc(), termrcurly); :}
"~" {: return Token(this.getLoc(), termtilde); :}
"~=" {: return Token(this.getLoc(), termtildeassign); :}

